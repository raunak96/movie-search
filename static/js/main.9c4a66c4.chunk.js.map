{"version":3,"sources":["assets/logo.svg","apis/api.js","components/SearchBox.jsx","components/Header.jsx","components/Movie.jsx","components/MovieList.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","FetchMovies","title","cancelToken","a","URL","process","axios","get","token","res","data","results","isCancel","console","log","response","SearchBox","handleChange","movieName","className","type","placeholder","onChange","value","Header","handleData","useState","setMovieName","useEffect","CancelToken","source","movies","setMovieData","alt","src","logo","style","height","e","target","Movie","movie","poster_src","overview","id","href","rel","MovieList","map","poster_path","key","App","setMovies","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,mLCiB5BC,EAfE,uCAAE,WAAOC,EAAMC,GAAb,iBAAAC,EAAA,yDACTC,EADS,4DACkDC,mCADlD,kBACyFJ,EADzF,WAGA,KAARA,EAHQ,yCAIA,IAJA,gCAMWK,IAAMC,IAAIH,EAAK,CAC7BF,YAAYA,EAAYM,QAPrB,cAMDC,EANC,yBASAA,EAAIC,KAAKC,SATT,sCAWHL,IAAMM,SAAN,MAXG,mDAYPC,QAAQC,IAAI,KAAMC,SAASL,MAZpB,0DAAF,wD,iBCaFM,EAbG,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,aAAaC,EAAe,EAAfA,UAEhC,OACC,2BACCC,UAAU,eACVC,KAAK,OACLC,YAAY,gBACZC,SAAUL,EACVM,MAAOL,KCsBKM,EA1BA,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAAgB,EACEC,mBAAS,IADX,mBACzBR,EADyB,KACdS,EADc,KAEhCC,qBAAU,YACS,uCAAG,8BAAAzB,EAAA,6DACdD,EAAcI,IAAMuB,YAAYC,SADlB,SAEC9B,EAAYkB,EAAWhB,GAFxB,OAEd6B,EAFc,OAGpBN,EAAWM,GAHS,2CAAH,qDAKlBC,KAEC,CAACd,IAKA,OACF,yBAAKC,UAAU,UACL,yBAAKA,UAAU,SACX,yBAAKc,IAAI,WAAWC,IAAKC,IAAMC,MAAO,CAAEC,OAAQ,UACzD,wBAAIlB,UAAU,cAAd,oBAEJ,kBAAC,EAAD,CAAWF,aATQ,SAACqB,GACrBX,EAAaW,EAAEC,OAAOhB,QAQkBL,UAAWA,MCVtCsB,G,MAfD,SAAC,GAAmD,IAAD,IAAhDC,MAASC,EAAuC,EAAvCA,WAAYzC,EAA2B,EAA3BA,MAAO0C,EAAoB,EAApBA,SAASC,EAAW,EAAXA,GACrD,OACC,yBAAKzB,UAAU,cACd,yBAAKA,UAAU,iBACd,yBAAKc,IAAI,SAASC,IAAKQ,KAExB,yBAAKvB,UAAU,iBACd,4BAAKlB,GACL,2BAAI0C,GACJ,uBAAGE,KAAI,2CAAsCD,GAAML,OAAO,SAASO,IAAI,uBAAvE,YCKWC,EAbG,SAAC,GAAc,IAAbhB,EAAY,EAAZA,OAChB,OACI,yBAAKZ,UAAU,aAEPY,EAAOiB,KAAI,SAAAP,GAEP,OADAA,EAAMC,WAAa,kCAAoCD,EAAMQ,YACrD,kBAAC,EAAD,CAAOC,IAAKT,EAAMG,GAAIH,MAAOA,SCM1CU,EAXH,WAAO,IAAD,EACUzB,mBAAS,IADnB,mBACTK,EADS,KACFqB,EADE,KAGhB,OACA,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAQ3B,WAHQ,SAAAf,GAAI,OAAG0C,EAAU1C,MAI5BqB,EAAOsB,OAAO,GAAK,kBAAC,EAAD,CAAWtB,OAAQA,MCE3BuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.9c4a66c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.02a9430b.svg\";","import axios from \"axios\";\n\nconst FetchMovies =async (title,cancelToken) => {\n    const URL = `https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_API_KEY}&query=${title}&page=1`;\n    \n        if(title===\"\")\n            return [];\n        try {\n            const res = await axios.get(URL, {\n                cancelToken:cancelToken.token,\n            });\n            return res.data.results;\n        } catch (error) {\n            if (axios.isCancel(error)) return;\n            console.log(error.response.data);\n        }\n    }\nexport default FetchMovies;","import React from 'react';\n\nconst SearchBox = ({handleChange,movieName}) => {\n\t\n\treturn (\n\t\t<input\n\t\t\tclassName='search-input'\n\t\t\ttype='text'\n\t\t\tplaceholder='Movie Name...'\n\t\t\tonChange={handleChange}\n\t\t\tvalue={movieName}\n\t\t/>\n\t);\n};\n\nexport default SearchBox;\n","import React, { useState, useEffect } from \"react\";\nimport FetchMovies from \"../apis/api\";\nimport logo from \"../assets/logo.svg\";\nimport SearchBox from './SearchBox';\nimport axios from 'axios';\n\nconst Header = ({handleData}) => {\n\tconst [movieName, setMovieName] = useState(\"\");\n\tuseEffect(()=>{\n\t\tconst setMovieData = async () => {\n\t\t\tconst cancelToken = axios.CancelToken.source();\n\t\t\tconst movies = await FetchMovies(movieName, cancelToken);\n\t\t\thandleData(movies);\n\t\t};\n\t\tsetMovieData();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t},[movieName]);\n\n\tconst handleChange = (e) => {\n\t\tsetMovieName(e.target.value);\n\t};\n    return (\n\t\t<nav className='navbar'>\n            <div className=\"title\">\n                <img alt='app icon' src={logo} style={{ height: \"35px\" }} />\n\t\t\t    <h1 className='brand-name'>MoviesDB Search</h1>\n            </div>\n\t\t\t<SearchBox handleChange={handleChange} movieName={movieName} />\n\t\t</nav>\n\t);\n};\n\nexport default Header;","import React from \"react\";\n\nconst Movie = ({ movie: { poster_src, title, overview,id } }) => {\n\treturn (\n\t\t<div className='movie-item'>\n\t\t\t<div className=\"img-container\">\n\t\t\t\t<img alt='poster' src={poster_src} />\n\t\t\t</div>\n\t\t\t<div className='movie-details'>\n\t\t\t\t<h3>{title}</h3>\n\t\t\t\t<p>{overview}</p>\n\t\t\t\t<a href={`https://www.themoviedb.org/movie/${id}`} target=\"_blank\" rel=\"noopener noreferrer\">View</a>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Movie;\n","import React from 'react';\nimport Movie from './Movie';\n\nconst MovieList = ({movies}) => {\n    return (\n        <div className=\"container\">\n            {\n                movies.map(movie=>{\n                    movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path\n                    return (<Movie key={movie.id} movie={movie}/>)\n                })\n            }\n        </div>\n    );\n};\n\nexport default MovieList;","import React, { Fragment, useState } from 'react';\nimport Header from './components/Header';\nimport \"./App.css\";\nimport MovieList from './components/MovieList';\nconst App = () => {\n  const [movies,setMovies]= useState([]); \n  const handleData =data=> setMovies(data);\n  return (\n\t\t<Fragment>\n\t\t\t\t<Header handleData={handleData} />\n        {movies.length>0 && <MovieList movies={movies}/>}\n\t\t</Fragment>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}